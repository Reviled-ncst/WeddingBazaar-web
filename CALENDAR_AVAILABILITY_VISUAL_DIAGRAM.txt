# 📊 Calendar Availability - Visual Flow Diagram

```
┌─────────────────────────────────────────────────────────────────────────┐
│                    WEDDING BAZAAR CALENDAR SYSTEM                        │
│                    Per-Vendor Availability Check                         │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│  USER INTERACTION FLOW                                                   │
└─────────────────────────────────────────────────────────────────────────┘

Step 1: User browses services
    ↓
┌──────────────────────────────────────┐
│  Service: Premium Photography        │
│  Vendor: Perfect Weddings Co.        │
│  Vendor ID: 2-2025-001              │
│  Price: ₱50,000                      │
│  [Book Now] ← User clicks           │
└──────────────────────────────────────┘
    ↓
Step 2: Booking Modal Opens
    ↓
┌──────────────────────────────────────┐
│  📅 BookingRequestModal              │
│  ┌────────────────────────────────┐ │
│  │ Service: Premium Photography   │ │
│  │ Vendor: Perfect Weddings Co.   │ │
│  │ vendorId: "2-2025-001"        │ │ ← Extracted from service
│  └────────────────────────────────┘ │
│                                      │
│  📅 Select Event Date:              │
│  ┌────────────────────────────────┐ │
│  │  BookingAvailabilityCalendar   │ │
│  │  Props:                        │ │
│  │    vendorId: "2-2025-001"     │ │ ← Passed to calendar
│  │    selectedDate: null          │ │
│  │    onDateSelect: (date) => {}  │ │
│  └────────────────────────────────┘ │
└──────────────────────────────────────┘
    ↓
Step 3: Calendar Component Initializes
    ↓
┌──────────────────────────────────────────────────────────────────────────┐
│  FRONTEND: availabilityService.ts                                        │
├──────────────────────────────────────────────────────────────────────────┤
│                                                                           │
│  getVendorAvailability(vendorId: "2-2025-001", month: 6, year: 2025)   │
│      ↓                                                                   │
│  1. Map vendor ID: "2-2025-001" → "2"                                   │
│      (Handles format variations)                                         │
│      ↓                                                                   │
│  2. Check cache for vendor "2" June 2025                                │
│      ↓                                                                   │
│  3. Cache miss? Fetch from API                                          │
│      ↓                                                                   │
│  4. API Request:                                                         │
│     GET https://weddingbazaar-web.onrender.com/api/bookings/vendor/2    │
│                                                                           │
└──────────────────────────────────────────────────────────────────────────┘
    ↓
    ↓ HTTP REQUEST
    ↓
┌──────────────────────────────────────────────────────────────────────────┐
│  BACKEND: routes/bookings.cjs                                            │
├──────────────────────────────────────────────────────────────────────────┤
│                                                                           │
│  router.get('/vendor/:vendorId')                                         │
│      ↓                                                                   │
│  1. Security Check: Validate vendor ID format                            │
│      ↓                                                                   │
│  2. Query Database:                                                      │
│     SELECT * FROM bookings WHERE vendor_id = '2'                         │
│      ↓                                                                   │
│  3. Returns ALL bookings for vendor (all services):                      │
│                                                                           │
│  [                                                                        │
│    {                                                                      │
│      id: "booking-123",                                                   │
│      vendor_id: "2",                                                      │
│      service_id: "premium-photo", ← Note: Different services            │
│      event_date: "2025-06-15",                                           │
│      status: "confirmed"                                                  │
│    },                                                                     │
│    {                                                                      │
│      id: "booking-456",                                                   │
│      vendor_id: "2",                                                      │
│      service_id: "basic-photo",   ← Same vendor, different service      │
│      event_date: "2025-06-22",                                           │
│      status: "request"                                                    │
│    }                                                                      │
│  ]                                                                        │
│                                                                           │
└──────────────────────────────────────────────────────────────────────────┘
    ↓
    ↓ HTTP RESPONSE
    ↓
┌──────────────────────────────────────────────────────────────────────────┐
│  FRONTEND: availabilityService.ts (Processing)                           │
├──────────────────────────────────────────────────────────────────────────┤
│                                                                           │
│  5. Receive all vendor bookings                                          │
│      ↓                                                                   │
│  6. For each date in June 2025:                                          │
│     - Filter bookings by date                                            │
│     - Count bookings on that date                                        │
│     - Check against max (default: 1 booking/day)                         │
│      ↓                                                                   │
│  7. Build availability map:                                              │
│                                                                           │
│     {                                                                     │
│       "2025-06-15": {                                                     │
│         isAvailable: false,    ← Has 1 booking                          │
│         reason: "Vendor already has a booking on this date",             │
│         currentBookings: 1,                                               │
│         maxBookingsPerDay: 1,                                             │
│         bookingIds: ["booking-123"]                                       │
│       },                                                                  │
│       "2025-06-22": {                                                     │
│         isAvailable: false,    ← Has 1 booking (even if "request")      │
│         reason: "Vendor already has a booking on this date",             │
│         currentBookings: 1,                                               │
│         bookingIds: ["booking-456"]                                       │
│       },                                                                  │
│       "2025-06-10": {                                                     │
│         isAvailable: true,     ← No bookings                            │
│         currentBookings: 0                                                │
│       }                                                                   │
│     }                                                                     │
│                                                                           │
│  8. Cache results for 1 minute                                           │
│      ↓                                                                   │
│  9. Return availability map to calendar                                  │
│                                                                           │
└──────────────────────────────────────────────────────────────────────────┘
    ↓
    ↓
┌──────────────────────────────────────────────────────────────────────────┐
│  UI: BookingAvailabilityCalendar (Rendering)                             │
├──────────────────────────────────────────────────────────────────────────┤
│                                                                           │
│  ┌──────────────────────────────────────────────────────────────┐       │
│  │                    June 2025                                  │       │
│  ├──────────────────────────────────────────────────────────────┤       │
│  │  Sun   Mon   Tue   Wed   Thu   Fri   Sat                    │       │
│  ├──────────────────────────────────────────────────────────────┤       │
│  │   1     2     3     4     5     6     7                      │       │
│  │  ✅    ✅    ✅    ✅    ✅    ✅    ✅   ← All available     │
│  │                                                               │       │
│  │   8     9    10    11    12    13    14                      │       │
│  │  ✅    ✅    ✅    ✅    ✅    ✅    ✅   ← All available     │
│  │                                                               │       │
│  │  15    16    17    18    19    20    21                      │       │
│  │  ❌    ✅    ✅    ✅    ✅    ✅    ✅   ← 15th booked       │
│  │ BOOKED                                                        │       │
│  │                                                               │       │
│  │  22    23    24    25    26    27    28                      │       │
│  │  ❌    ✅    ✅    ✅    ✅    ✅    ✅   ← 22nd booked       │
│  │ BOOKED                                                        │       │
│  │                                                               │       │
│  │  29    30                                                     │       │
│  │  ✅    ✅                                                     │       │
│  └──────────────────────────────────────────────────────────────┘       │
│                                                                           │
│  Legend:                                                                  │
│  ✅ = Available (white/light background, clickable)                     │
│  ❌ = Booked (red background, strikethrough, not clickable)             │
│                                                                           │
└──────────────────────────────────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────┐
│  KEY INSIGHT: WHY PER-VENDOR, NOT PER-SERVICE?                           │
└─────────────────────────────────────────────────────────────────────────┘

Example Vendor: "Perfect Weddings Photography"

Services Offered:
  1. Basic Package     (₱15,000) ← service_id: "basic-photo"
  2. Standard Package  (₱25,000) ← service_id: "standard-photo"
  3. Premium Package   (₱50,000) ← service_id: "premium-photo"

Scenario:
  ┌────────────────────────────────────────────────────────────┐
  │ June 15, 2025: Client A books "Basic Package"             │
  └────────────────────────────────────────────────────────────┘
         ↓
  ┌────────────────────────────────────────────────────────────┐
  │ System marks June 15 as UNAVAILABLE for ALL packages      │
  └────────────────────────────────────────────────────────────┘
         ↓
  ┌────────────────────────────────────────────────────────────┐
  │ Client B tries to book "Premium Package" on June 15       │
  └────────────────────────────────────────────────────────────┘
         ↓
  ┌────────────────────────────────────────────────────────────┐
  │ ❌ BLOCKED: "Vendor already has a booking on this date"   │
  └────────────────────────────────────────────────────────────┘

Why This Makes Sense:
  📷 The photographer can't shoot two weddings on the same day
  🎭 The DJ can't perform at two venues simultaneously
  🍽️ The caterer's kitchen/staff is committed to one event
  🏰 The venue physically can't host two weddings at once
  💐 The planner can't coordinate two events on the same day


┌─────────────────────────────────────────────────────────────────────────┐
│  COMPARISON: WHAT IF IT WAS PER-SERVICE? (WRONG APPROACH)               │
└─────────────────────────────────────────────────────────────────────────┘

If Per-Service (Hypothetical - NOT our implementation):

  June 15, 2025:
    ├─ Basic Package:     BOOKED (Client A)     ← service_id: "basic-photo"
    ├─ Standard Package:  AVAILABLE ⚠️ WRONG!  ← service_id: "standard-photo"
    └─ Premium Package:   AVAILABLE ⚠️ WRONG!  ← service_id: "premium-photo"

  Problem:
    Client B could book "Premium Package" on June 15
    → Vendor is DOUBLE-BOOKED for the same day!
    → Impossible to fulfill both bookings
    → Business nightmare 😱


┌─────────────────────────────────────────────────────────────────────────┐
│  DATABASE QUERY FLOW                                                     │
└─────────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────────┐
│  PostgreSQL Database (Neon)                                             │
├────────────────────────────────────────────────────────────────────────┤
│                                                                          │
│  Table: bookings                                                         │
│  ┌──────────────────────────────────────────────────────────────────┐ │
│  │ id         │ user_id │ vendor_id │ service_id     │ event_date  │ │
│  ├──────────────────────────────────────────────────────────────────┤ │
│  │ booking-1  │ user-a  │ 2         │ basic-photo    │ 2025-06-15  │ │
│  │ booking-2  │ user-b  │ 2         │ premium-photo  │ 2025-06-22  │ │
│  │ booking-3  │ user-c  │ 3         │ catering       │ 2025-06-15  │ │
│  │ booking-4  │ user-d  │ 2         │ standard-photo │ 2025-07-01  │ │
│  └──────────────────────────────────────────────────────────────────┘ │
│                                                                          │
│  Query: SELECT * FROM bookings WHERE vendor_id = '2'                    │
│                                                                          │
│  Results: ┌─────────────────────────────────────────────────────┐     │
│           │ booking-1 (2025-06-15, basic-photo)                 │     │
│           │ booking-2 (2025-06-22, premium-photo)               │     │
│           │ booking-4 (2025-07-01, standard-photo)              │     │
│           └─────────────────────────────────────────────────────┘     │
│                                                                          │
│  Notice:                                                                 │
│    - Returns bookings for ALL services by this vendor               │
│    - booking-3 is excluded (different vendor_id)                    │
│    - service_id is recorded but NOT used for filtering              │
│                                                                          │
└────────────────────────────────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────┐
│  EDGE CASES & HANDLING                                                   │
└─────────────────────────────────────────────────────────────────────────┘

1. Multiple Bookings on Same Date (Different Statuses):
   ┌──────────────────────────────────────────────────────┐
   │ June 15:                                              │
   │  - Booking A: status = "request" (pending)           │
   │  - Booking B: status = "confirmed" (accepted)        │
   │ Result: Date marked as UNAVAILABLE                   │
   │ Reason: Even pending requests block the calendar     │
   └──────────────────────────────────────────────────────┘

2. Vendor ID Format Variations:
   ┌──────────────────────────────────────────────────────┐
   │ Frontend service: vendor_id = "2-2025-001"           │
   │                   ↓                                   │
   │ availabilityService.mapVendorIdForBookings()        │
   │                   ↓                                   │
   │ Backend query: vendor_id = "2"                       │
   │ Ensures compatibility between formats                │
   └──────────────────────────────────────────────────────┘

3. API Request Failures:
   ┌──────────────────────────────────────────────────────┐
   │ If /api/bookings/vendor/:vendorId fails:             │
   │  → Default to "Available" (optimistic)               │
   │  → Show warning to user                               │
   │  → Reason: "Could not verify bookings"               │
   └──────────────────────────────────────────────────────┘

4. Cache Invalidation:
   ┌──────────────────────────────────────────────────────┐
   │ Cache Duration: 1 minute                              │
   │ After 60 seconds: Re-fetch from API                  │
   │ Why: Ensures recent bookings are reflected           │
   └──────────────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────┐
│  PERFORMANCE METRICS                                                     │
└─────────────────────────────────────────────────────────────────────────┘

Typical Request Flow:

  1. First Request (Cache Miss):
     ├─ API Call: ~500-800ms
     ├─ Data Processing: ~50-100ms
     └─ Total: ~600-900ms

  2. Subsequent Requests (Cache Hit):
     ├─ Cache Lookup: ~1-5ms
     ├─ No API call needed
     └─ Total: ~1-5ms (200x faster!)

  3. Cache Expiration (After 1 minute):
     ├─ Re-fetches from API
     └─ Back to ~600-900ms

Optimization Benefits:
  ✅ Reduces server load
  ✅ Improves user experience
  ✅ Prevents redundant database queries


┌─────────────────────────────────────────────────────────────────────────┐
│  SECURITY VALIDATIONS                                                    │
└─────────────────────────────────────────────────────────────────────────┘

Backend Security Checks:

  1. Vendor ID Format Validation:
     ├─ Reject malformed IDs (SQL injection prevention)
     └─ Example: "2'; DROP TABLE bookings--" → BLOCKED

  2. Data Integrity Check:
     ├─ Verify all returned bookings match requested vendor
     └─ If mismatch detected → Error 500 (data integrity violation)

  3. Rate Limiting (Render.com):
     ├─ Prevents excessive API calls
     └─ Protects against DDoS attacks

  4. CORS Configuration:
     ├─ Only allows requests from: weddingbazaar-web.web.app
     └─ Blocks unauthorized domains


┌─────────────────────────────────────────────────────────────────────────┐
│  FUTURE ENHANCEMENTS (Optional)                                          │
└─────────────────────────────────────────────────────────────────────────┘

If a vendor needs per-service availability (rare):

  1. Add to services table:
     ┌───────────────────────────────────────────┐
     │ ALTER TABLE services ADD COLUMN           │
     │   max_concurrent_bookings INTEGER         │
     │   DEFAULT 1;                               │
     └───────────────────────────────────────────┘

  2. Update availability logic:
     ┌───────────────────────────────────────────┐
     │ Filter bookings by service_id:            │
     │ const bookingsForService =                │
     │   bookingsOnDate.filter(                  │
     │     b => b.service_id === serviceId       │
     │   );                                       │
     └───────────────────────────────────────────┘

  3. Use cases:
     ├─ Rental companies (multiple units)
     ├─ Large catering (multiple teams)
     └─ Venues with multiple halls


┌─────────────────────────────────────────────────────────────────────────┐
│  ✅ SUMMARY: PER-VENDOR AVAILABILITY                                     │
└─────────────────────────────────────────────────────────────────────────┘

✅ Calendar checks availability for the ENTIRE VENDOR
✅ Not limited to individual services
✅ Prevents double-booking on the same date
✅ Makes business sense for wedding vendors
✅ Uses vendor_id from service object
✅ Backend returns all vendor bookings (all services)
✅ Frontend filters by event_date
✅ Security validations in place
✅ Performance optimized with caching
✅ Production-ready and tested

Last Updated: December 2024
Status: PRODUCTION READY ✅
